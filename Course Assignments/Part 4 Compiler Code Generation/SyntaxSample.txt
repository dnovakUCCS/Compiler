/*
FINAL syntactic CODE FOR SP22 Compiler Class.

Four methods shown below are added to LEXICAL, where EOF, reserve and mnemonic
tables are accessible:
public boolean EOF(){
  //EOF is a private boolean in Lexical
  return EOF;
}
 
public int codeFor(String mnemonic){
    return mnemonics.LookupName(mnemonic);
}
public String reserveFor(String mnemonic){
    return reserveWords.LookupCode(mnemonics.LookupName(mnemonic));
}

public void setPrintToken(boolean on){
    printToken = on;
}

Add 2 lines which prints each token found by GetNextToken:
            if (printToken) {
                System.out.println("\t" + result.mnemonic + " | \t" + String.format("%04d", result.code) + " | \t" + result.lexeme);
            }

 */
package ADT;

/**
 *
 * @author abrouill
 */
public class Syntactic {

    private String filein;              //The full file path to input file
    private SymbolTable symbolList;     //Symbol table storing ident/const
    private QuadTable quads;
    private Interpreter interp;
    private Lexical lex;                //Lexical analyzer 
    private Lexical.token token;        //Next Token retrieved 
    private boolean traceon;            //Controls tracing mode 
    private int level = 0;              //Controls indent for trace mode
    private boolean anyErrors;          //Set TRUE if an error happens 

    private final int symbolSize = 250;
    private final int quadSize = 1500;
    private int Minus1Index;
    private int Plus1Index;

    public Syntactic(String filename, boolean traceOn) {
        filein = filename;
        traceon = traceOn;
        symbolList = new SymbolTable(symbolSize);
        Minus1Index = symbolList.AddSymbol("-1", symbolList.constantkind, -1);
        Plus1Index = symbolList.AddSymbol("1", symbolList.constantkind, 1);

        quads = new QuadTable(quadSize);
        interp = new Interpreter();

        lex = new Lexical(filein, symbolList, true);
        lex.setPrintToken(traceOn);
        anyErrors = false;
    }

//Interface to the syntax analyzer, initiates parsing    
    public void parse() {

// make filename pattern for symbol table and quad table output later
        String filenameBase = filein.substring(0, filein.length() - 4);
        System.out.println(filenameBase);
        int recur = 0;
// prime the pump, get first token
        token = lex.GetNextToken();
// call PROGRAM
        recur = Program();
// done, so add the final STOP quad
        quads.AddQuad(interp.opcodeFor("STOP"), 0, 0, 0);

        //print ST, QUAD before execute
        symbolList.PrintSymbolTable(filenameBase + "ST-before.txt");
        quads.PrintQuadTable(filenameBase + "QUADS.txt");
        //interpret
        if (!anyErrors) {
            interp.InterpretQuads(quads, symbolList, false, filenameBase + "TRACE.txt");
        } else {
            System.out.println("Errors, unable to run program.");
        }
        symbolList.PrintSymbolTable(filenameBase + "ST-after.txt");

    }

    private int handlePrintln() {
        int recur = 0;
        int toprint = 0;
        if (anyErrors) {
            return -1;
        }

        trace("handlePrintln", true);
        //got here from a PRINT token, move past it...
        token = lex.GetNextToken();
        //look for ( stringconst, ident, simpleexp )
        if (token.code == lex.codeFor("LPAR")) {
            //move on
            token = lex.GetNextToken();
            if ((token.code == lex.codeFor("SCNS"))) { //|| (token.code == lex.codeFor("IDNT"))) {
                // save index for string literal or identifier
                toprint = symbolList.LookupSymbol(token.lexeme);
                //move on
                token = lex.GetNextToken();
            } else {
                toprint = SimpleExpression();
            }
            quads.AddQuad(interp.opcodeFor("PRINT"), toprint, 0, 0);
            //now need right ")"
            if (token.code == lex.codeFor("RPAR")) {
                //move on
                token = lex.GetNextToken();
            } else {
                error(lex.reserveFor("RPAR"), token.lexeme);
            }
        } else {
            error(lex.reserveFor("LPAR"), token.lexeme);
        }
        // end lpar group

        trace("handlePrintn", false);
        return recur;

    }


    private int Variable() {
        int recur = 0;
        if (anyErrors) {
            return -1;
        }

        trace("Variable", true);
        if ((token.code == lex.codeFor("IDNT"))) {
            //return the location of this variable for Quad use
            recur = symbolList.LookupSymbol(token.lexeme);
            // bookkeeping and move on
            token = lex.GetNextToken();
        } else {
            error("Variable", token.lexeme);
        }

        trace("Variable", false);
        return recur;

    }
	 private int UnsignedConstant() {
        int recur = 0;
        if (anyErrors) {
            return -1;
        }

        trace("UnsignedConstant", true);
        // only accepting a number
        recur = UnsignedNumber();
        trace("UnsignedConstant", false);
        return recur;
    }


    private int UnsignedNumber() {
        int recur = 0;
        if (anyErrors) {
            return -1;
        }

        trace("UnsignedNumber", true);
        // float or int or ERROR
        // unsigned constant starts with integer or float number
        if ((token.code == lex.codeFor("ICNS")
                || (token.code == lex.codeFor("FCNS")))) {
            // return the s.t. index 
            recur = symbolList.LookupSymbol(token.lexeme);
            token = lex.GetNextToken();
        } else {
            error("Integer or Floating Point Number", token.lexeme);
        }
        trace("UnsignedNumber", false);
        return recur;

    }
